#!/bin/bash

if [ -n "$WIN32" ]; then
    export WIN32=1
    eval set -- $DVM_ARGS
    export PATH="$PATH:/usr/local/bin:/usr/bin:/c/mingw/bin:/mingw/bin:/bin"
    export dvmdir="$DVMDIR"
    export dvmdirW="$DVMDIRW"
    export sort=/bin/sort
    export grep=/bin/grep
    export sed=/bin/sed
    export mktemp_path=`which mktemp`
    mktemp() {
        res=`$mktemp_path -p . "$@"`
        echo $res
   }
   export -f mktemp
else
    export sort=sort
    export grep=grep
    if [ "$(uname)" = "Darwin" ]; then
        export sed=gsed
        export IS_OSX=1
    else
        export sed=sed
    fi
    if [ "$(uname | grep -i cygwin | wc -l)" -gt 0 ]; then
        export WIN32=1
    fi
fi

if [ ! -d "$dvmdir" ]; then
    if [ "$IS_OSX" = "1" ]; then
        export dvmdir=$(dirname "$(dirname "$(greadlink --canonicalize "$BASH_SOURCE")")")
    else
        export dvmdir=$(dirname "$(dirname "$(readlink --canonicalize "$BASH_SOURCE")")")
    fi
fi

export PATH="$dvmdir/bin:$PATH"

. dvm_settings.sh

. dvm_utils.sh

if [ -z "$LC_ALL" ]; then
    export LC_ALL=C
fi

if [ -n "$dvmbuild" -a "$dvmbuild" != "$dvmbuild_real" ]; then
    echo "Warning: You are using a 'dvm' script from a different build. It can lead to various problems."
    echo "Warning: Used build is '$dvmbuild_real'"
    echo "Warning: 'dvm' script is from '$dvmbuild'"
fi

if [ $# -eq 0 ]; then
    set -- help
fi

KNOWN_COMMANDS="help convert cdv cxxdv fdv compile c cxx f comp cc cxxc fc link clink cxxlink flink run cmph csdeb cpdeb fsdeb fpdeb err red trc ptrc dif size runpred ctest ftest ver pred pa doc"

COM="$1"
found=0
for cmd in $KNOWN_COMMANDS; do
    if [ "$COM" = "$cmd" ]; then
        found=1
        break
    fi
done
if [ $found -eq 0 ]; then
    echo "Unknown command '$COM'. Use 'help' command to see possible options."
    exit 1
fi
shift

do_help() {
    dvm_help "$@"
}

do_convert() {
    CONVERTATION_ONLY=1 dvm_comp "$@"
}
do_cdv() {
    SRC_LANG=c do_convert "$@"
}
do_cxxdv() {
    SRC_LANG=cxx do_convert "$@"
}
do_fdv() {
    SRC_LANG=f do_convert "$@"
}

do_compile() {
    dvm_comp "$@"
}
do_c() {
    SRC_LANG=c do_compile "$@"
}
do_cxx() {
    SRC_LANG=cxx do_compile "$@"
}
do_f() {
    SRC_LANG=f do_compile "$@"
}

do_comp() {
    NO_CONVERTATION=1 dvm_comp "$@"
}
do_cc() {
    SRC_LANG=c do_comp "$@"
}
do_cxxc() {
    SRC_LANG=cxx do_comp "$@"
}
do_fc() {
    SRC_LANG=f do_comp "$@"
}

do_link() {
    dvm_link "$@"
}
do_clink() {
    SRC_LANG=c do_link "$@"
}
do_cxxlink() {
    SRC_LANG=cxx do_link "$@"
}
do_flink() {
    SRC_LANG=f do_link "$@"
}

do_run() {
    dvm_run "$@"
}

do_cmph() {
    DVMH_COMPARE_DEBUG=1 dvm_run "$@"
}

deb_comp() {
    for prname; do :; done
    if [ "$SRC_LANG" = "c" ]; then
        prname="$( remove_exts "$prname" $C_EXTS )"
    else
        prname="$( remove_exts "$prname" $FDV_EXTS )"
    fi
    dvm_comp -$MODE -d4 -o "${prname}_$MODE$EXE_SUFFIX" "$@"
}
do_csdeb() {
    SRC_LANG=c MODE=s deb_comp "$@"
}
do_cpdeb() {
    SRC_LANG=c MODE=p deb_comp "$@"
}
do_fsdeb() {
    SRC_LANG=f MODE=s deb_comp "$@"
}
do_fpdeb() {
    SRC_LANG=f MODE=p deb_comp "$@"
}

deb_run() {
    prname="$( get_first_non_number "$@" )"
    cp "${prname}_$MODE$EXE_SUFFIX" "$prname$EXE_SUFFIX" && \
    if [ -n "$dvmdirW" ]; then
        strrun="$dvmdirW\\par\\$PARFN" dvm_run "$@"
    else
        strrun="$dvmdir/par/$PARFN" dvm_run "$@"
    fi
}
do_err() {
    MODE=p PARFN=deb_err.par deb_run "$@"
}
do_red() {
    MODE=p PARFN=deb_red.par deb_run "$@"
}
do_trc() {
    MODE=s PARFN=deb_trc.par deb_run "$@"
}
do_ptrc() {
    MODE=p PARFN=deb_trc.par deb_run "$@"
}
do_dif() {
    MODE=p PARFN=deb_dif.par deb_run "$@"
}
do_size() {
    MODE=s PARFN=deb_size.par deb_run "$@"
}

do_runpred() {
    prname="$( get_first_non_number "$@" )"
    rm -f "${prname}_pred.par" "$prname.ptr"
    cp "$dvmdir/par/pred_trc.par" "${prname}_pred.par" && \
    echo "TracePath=$prname;" >>"${prname}_pred.par" && \
    echo "TraceFileExt=ptr;" >>"${prname}_pred.par" && \
    strrun="${prname}_pred.par" dvm_run "$@"
}

do_ctest() {
    SRC_LANG=c dvm_test "$@"
}
do_ftest() {
    SRC_LANG=f dvm_test "$@"
}

do_ver() {
    dvm_ver "$@"
}

do_pred() {
    dvm_pred "$@"
}

do_pa() {
    dvmstf "$@"
}

do_doc() {
    dvm_doc "$@"
}

do_$COM "$@"
exit $?
