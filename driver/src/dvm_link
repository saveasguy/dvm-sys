#!/bin/bash

# Uses variables: SRC_LANG, IS_OSX, PLINKER, PFLINKER, dvmdir, ADD_LIB_PATHS, ADD_LIBS, CUDA_LIB, flib, dvmshow, NVCC

. dvm_utils.sh

errld() {
    if [ -n "$1" ]; then
        printf '%s\n' "$1" >>dvm.err
        printf '%s\n' "$1"
    fi
    echo "!!! error ${SRC_LANG}link !!!" >>dvm.err
    echo "!!! error ${SRC_LANG}link !!!"
    exit 1
}

rm -f dvm.err

SHARED_DVM=0
DLINK=0
M_INFO=0
LIB_SUFFIX=
MIC_OPT=
OUTPUT=
INPUTS=()

while [ $# -gt 0 ]; do
    if [ "$1" = "-shared-dvm" ]; then
       if [ "$WIN32" != "1" ]; then
           if [ "$IS_OSX" != "1" ]; then
               SHARED_DVM=1
           else
               echo "Linking against shared DVM libraries is unavailable under OSX"
           fi
       else
           echo "Linking against shared DVM libraries is unavailable under OS Windows"
       fi
    elif [ "$1" = "-dynComp" ]; then
       DLINK=1
    elif [ "$1" = "-Minfo" ]; then
       M_INFO=1 
    elif [ "$1" = "-mmic" ]; then
       LIB_SUFFIX=".mic"
       CUDA_LIB=
       MIC_OPT="-mmic"
    elif [ "$1" = "-o" ]; then
        shift
        OUTPUT="$1"
    else
       INPUTS+=("$1")
    fi
    shift 
done

CMD_END=()
for p in $ADD_LIB_PATHS; do
    CMD_END+=("-L$p")
    if [ "$WIN32" != "1" ]; then
        CMD_END+=(-Xlinker -rpath -Xlinker "$p")
    fi
done

if [ "$SRC_LANG" = "f" ]; then
    COM="$PFLINKER"
    eval CMD_END+=($CUDA_LIB $ADD_LIBS $flib)
    dvmflib="-ldvm-f$LIB_SUFFIX"
else
    COM="$PLINKER"
    eval CMD_END+=($CUDA_LIB $ADD_LIBS)
    dvmflib=
fi

eval CMD_BEGIN=($COM $MIC_OPT)

if [ -n "$OUTPUT" ]; then
    if [[ "$COM" =~ "link.exe" ]]; then
        CMD_BEGIN+=("/out:$OUTPUT")
    else
        CMD_BEGIN+=("-o" "$OUTPUT")
    fi
fi

if [ $SHARED_DVM -eq 0 ]; then
    dvmlibs=("$dvmdir/lib/dvmh$LIB_SUFFIX.$LIB_EXT" "$dvmdir/lib/map_tasks$LIB_SUFFIX.$LIB_EXT" "$dvmdir/lib/dvm$LIB_SUFFIX.$LIB_EXT")
else
    dvmlibs=("-L$dvmdir/lib" -Xlinker -rpath -Xlinker "$dvmdir/lib" -ldvmh$LIB_SUFFIX -ldvm-map-tasks$LIB_SUFFIX $dvmflib -ldvm$LIB_SUFFIX)
fi

DLINK_FILE=""
if [ "$NVCC" ]; then
    if [ $DLINK -ne 0 ]; then
       TMPFN=`mktemp`
       eval NVCC_exp=($NVCC)
       version=`$NVCC --version | grep 'Cuda compilation tools' | sed -nE 's/.*\bV([0-9]+).*/\1/p;T;q'`
       if [ $version -gt 10 ]; then
          do_cmd -out-to $TMPFN "${NVCC_exp[@]}" -o tmp_nvcc_dlink.o -dlink -dlto -Xptxas -v "${INPUTS[@]}" || errld
       else
          do_cmd -out-to $TMPFN "${NVCC_exp[@]}" -o tmp_nvcc_dlink.o -dlink -Xptxas -v "${INPUTS[@]}" || errld
       fi

       DLINK_FILE=tmp_nvcc_dlink.o

       cat $TMPFN | $grep -E -v "ptxas info|bytes spill stores" 1>& 2
       if [ $M_INFO -ne 0 ]; then
          cat $TMPFN | $grep -E "ptxas info|bytes spill stores" | analyzePtxasCuda "ALL_PROGRAM"
       fi
       rm $TMPFN
    fi
fi

do_cmd "${CMD_BEGIN[@]}" "${INPUTS[@]}" $DLINK_FILE "${dvmlibs[@]}" "${CMD_END[@]}" || errld

if [ "$DLINK_FILE" ]; then
    rm $DLINK_FILE
fi
