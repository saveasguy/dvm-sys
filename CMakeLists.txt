cmake_minimum_required(VERSION 3.18)

set(CMAKE_FIND_NO_INSTALL_PREFIX TRUE)

project(DVM VERSION 5.0.0 LANGUAGES C CXX Fortran)

set(DVM_RUN dvm_run CACHE STRING "DVM build mode.")
set_property(CACHE DVM_RUN PROPERTY STRINGS dvm_run dvm_run_nompi)

# Optional parameters.
set(DVM_Fortran_LIBRARIES "" CACHE PATH "Set addition Fortran libraries to link with.")

set(DVM_LIBRARY_FOLDER "Libraries" CACHE STRING "Specify IDE folder for DVM libraries.")
set(DVM_TOOL_FOLDER "Tools" CACHE STRING "Specify IDE folder for DVM executables.")
set(DVM_RESOURCE_FOLDER "Resources" CACHE STRING "Specify IDE folder for generators of DVM resources.")

if (DVM_LIBRARY_FOLDER OR DVM_TOOL_FOLDER OR DVM_RESOURCE_FOLDER)
  set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

macro(dvm_add_default_flags lang flag)
  if (CMAKE_CONFIGURATION_TYPES)
    foreach(C ${CMAKE_CONFIGURATION_TYPES})
      string(TOUPPER ${C} C_UPPER)
      foreach(F IN ITEMS ${ARGN})
        set(DVM_${lang}_${flag}_FLAGS_${C_UPPER}_DEFAULT
          "${DVM_${lang}_${flag}_FLAGS_${C_UPPER}_DEFAULT} ${F}")
      endforeach()
    endforeach()
  else()
    foreach(F IN ITEMS ${ARGN})
      set(DVM_${lang}_${flag}_FLAGS_DEFAULT
        "${DVM_${lang}_${flag}_FLAGS_DEFAULT} ${F}")
    endforeach()
  endif()
endmacro()

string(TIMESTAMP DVM_PLATFORM_TIME)
if (WIN32)
  if (CMAKE_VS_PLATFORM_NAME STREQUAL "x64")
    set(DVM_MACHINE_STRING "x64")
  elseif(CMAKE_VS_PLATFORM_NAME STREQUAL "Win32")
    set(DVM_MACHINE_STRING "x86")
  endif()
  if (NOT DEFINED DVM_MACHINE_STRING)
    if (CMAKE_GENERATOR_PLATFORM STREQUAL "x64")
      set(DVM_MACHINE_STRING "x64")
    elseif(CMAKE_GENERATOR_PLATFORM STREQUAL "Win32")
      set(DVM_MACHINE_STRING "x86")
    endif()
  endif()
  if (NOT DEFINED DVM_MACHINE_STRING)
    file(WRITE ${CMAKE_BINARY_DIR}/check_machine.c
      "#if defined(i386) || defined(__i386) || defined(__i386__) || \\
          defined(_M_IX86) || defined(__X86__) || defined(_X86_)
         #error cmake_machine_arch x86
       #elif defined(__x86_64) || defined(__x86_64__) || defined(__amd64) || \\
             defined(__amd64__) || defined(_M_X64) || defined(_M_AMD64)
         #error cmake_machine_arch x64
       #endif
       #error cmake_machine_arch "
    )
    try_run(
      RUN_RESULT COMPILE_RESULT
      ${CMAKE_BINARY_DIR} ${CMAKE_BINARY_DIR}/check_machine.c
      COMPILE_OUTPUT_VARIABLE DVM_MACHINE_STRING
    )
    string(REGEX MATCH "cmake_machine_arch [a-zA-Z0-9_]+"
      DVM_MACHINE_STRING "${DVM_MACHINE_STRING}")
    string(REPLACE "cmake_machine_arch " ""
      DVM_MACHINE_STRING ${DVM_MACHINE_STRING})
    if (NOT DVM_MACHINE_STRING STREQUAL "x86" AND
        NOT DVM_MACHINE_STRING STREQUAL "x64")
      message(FATAL_ERROR "Unable to determine target architecture.")
    endif()
  endif()

  foreach(C ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER ${C} C_UPPER)
    foreach(L C CXX Fortran)
      if (${C_UPPER} STREQUAL "DEBUG")
        set(DVM_${L}_COMPILE_FLAGS_${C_UPPER}_DEFAULT "-MDd -Od -Ob0 -Zi")
        set(DVM_${L}_LINK_FLAGS_${C_UPPER}_DEFAULT "-Zi")
      else()
        if (${C_UPPER} STREQUAL "RELEASE")
          set(DVM_${L}_COMPILE_FLAGS_${C_UPPER}_DEFAULT "-O2 -Ob2")
        elseif(${C_UPPER} STREQUAL "RELWITHDEBINFO")
          set(DVM_${L}_COMPILE_FLAGS_${C_UPPER}_DEFAULT "-O2 -Ob1 -Zi")
          set(DVM_${L}_LINK_FLAGS_${C_UPPER}_DEFAULT "-Zi")
        elseif(${C_UPPER} STREQUAL "MINSIZEREL")
          set(DVM_${L}_COMPILE_FLAGS_${C_UPPER}_DEFAULT "-O1 -Ob1")
        endif()
        set(DVM_${L}_COMPILE_FLAGS_${C_UPPER}_DEFAULT "${DVM_${L}_COMPILE_FLAGS_${C_UPPER}_DEFAULT} -MD")
      endif()
      set(DVM_${L}_COMPILE_FLAGS_${C_UPPER}_DEFAULT "${DVM_${L}_COMPILE_FLAGS_${C_UPPER}_DEFAULT} -nologo")
      set(DVM_${L}_LINK_FLAGS_${C_UPPER}_DEFAULT "${DVM_${L}_LINK_FLAGS_${C_UPPER}_DEFAULT} -nologo")
    endforeach()
  endforeach()

  set(DVM_MSYS_ROOT "" CACHE PATH "Set path to the bash on Windows OS (for example MSYS2 or MinGW).")
  if (NOT EXISTS ${DVM_MSYS_ROOT})
    message(SEND_ERROR "Path to the bash must be specified on Windows OS.")
  else()
    file(TO_NATIVE_PATH "${DVM_MSYS_ROOT}" DVM_MSYS_ROOT_NATIVE)
  endif()
  set(DVM_WINAPI_LIBRARIES advapi32.lib CACHE PATH "Set list of Windows API libraries to link with.")

  if(NOT CMAKE_Fortran_COMPILER_ID STREQUAL "Intel" AND
     NOT CMAKE_Fortran_COMPILER_ID STREQUAL "IntelLLVM")
    message(SEND_ERROR "Only Intel Fortran compilers are supported on Windows OS.")
  else()
    set(DVM_USE_Fortran_WRAPPER_DEFAULT ON)
    set(DVM_Fortran_NAMING_MACROS_DEFAULT -D_MS_F_)
    DVM_ADD_DEFAULT_FLAGS("Fortran" "COMPILE" -names=lowercase)
  endif()

  set(DVM_Fortran_SETVARS "DVM_Fortran_SETVARS-NOTFOUND" CACHE FILEPATH
      "Path to Fortran environment configuration script")
  if (NOT EXISTS ${DVM_Fortran_SETVARS})
    get_filename_component(DVM_Fortran_COMPILER_DIR ${CMAKE_Fortran_COMPILER} DIRECTORY)
    if (DEFINED ENV{ONEAPI_ROOT})
      string(LENGTH $ENV{ONEAPI_ROOT} LEN)
      string(SUBSTRING ${DVM_Fortran_COMPILER_DIR} 0 ${LEN} LHS)
      file(TO_CMAKE_PATH ${LHS} LHS)
      file(TO_CMAKE_PATH $ENV{ONEAPI_ROOT} RHS)
      if (LHS STREQUAL RHS)
        set(DVM_Fortran_ROOT ${LHS})
        find_file(DVM_Fortran_SETVARS setvars.bat ${DVM_Fortran_ROOT} NO_DEFAULT_PATH)
      endif()
    endif()
    if (NOT EXISTS ${DVM_Fortran_SETVARS})
      set(DVM_Fortran_ROOT ${DVM_Fortran_COMPILER_DIR})
      string(FIND "${DVM_Fortran_ROOT}" "/" POS REVERSE)
      while(NOT (POS EQUAL -1 OR EXISTS ${DVM_Fortran_SETVARS}))
        string(SUBSTRING "${DVM_Fortran_ROOT}" 0 "${POS}" DVM_Fortran_ROOT)
        find_file(DVM_Fortran_SETVARS setvars.bat ${DVM_Fortran_ROOT} NO_DEFAULT_PATH)
        string(FIND "${DVM_Fortran_ROOT}" "/" POS REVERSE)
      endwhile()
    endif()
    if (NOT EXISTS ${DVM_Fortran_SETVARS})
      message(SEND_ERROR "Unable to find the Fortran environment configuration script")
    endif()
  else()
    file(TO_NATIVE_PATH "${DVM_Fortran_SETVARS}" DVM_Fortran_SETVARS_NATIVE)
  endif()

  set(DVM_PLATFORM_STRING "$ENV{USERNAME}-cmake-${DVM_MACHINE_STRING}-${DVM_VERSION}-${DVM_PLATFORM_TIME}")
else()
  set(DVM_PLATFORM_STRING "$ENV{USER}-cmake-${DVM_VERSION}-${DVM_PLATFORM_TIME}")
endif()

set(DVM_C_CONVERTER_FLAGS_DEFAULT -e2)
set(DVM_Fortran_CONVERTER_FLAGS_DEFAULT -e2)
if (DVM_MACHINE_STRING STREQUAL "x64")
  set(DVM_Fortran_CONVERTER_FLAGS_DEFAULT "${DVM_Fortran_CONVERTER_FLAGS_DEFAULT} -t8")
endif()

find_package(MPI)
if (NOT MPI_FOUND OR NOT MPIEXEC_EXECUTABLE)
  message(SEND_ERROR "Unable to build DVM system without MPI.")
else()
  get_filename_component(DVM_MPI_BIN ${MPIEXEC_EXECUTABLE} ABSOLUTE)
  get_filename_component(DVM_MPI_BIN ${DVM_MPI_BIN} DIRECTORY)
  file(TO_NATIVE_PATH "${DVM_MPI_BIN}" DVM_MPI_BIN_NATIVE)
endif()

set(MAKE_CUDA_HOST_COMPILER cl.exe)

find_package(CUDAToolkit)

if (NOT CUDAToolkit_FOUND)
  unset(DVM_ENABLE_CUDA CACHE)
  unset(DVMH_NUM_CUDAS CACHE)
  set(DVM_ENABLE_CUDA OFF)
  if (DVM_MACHINE_STRING STREQUAL "x86")
    set(DVM_CUDA_FLAGS_DEFAULT --machine=32)
  endif()
else()
  option(DVM_ENABLE_CUDA "Enable CUDA support." ON)
  enable_language(CUDA)
endif()

if (NOT DVM_ENABLE_CUDA)
  set(DVM_C_CONVERTER_FLAGS_DEFAULT "${DVM_C_CONVERTER_FLAGS_DEFAULT} -noCuda")
  set(DVM_Fortran_CONVERTER_FLAGS_DEFAULT "${DVM_Fortran_CONVERTER_FLAGS_DEFAULT} -noCuda")
else()
  set(DVMH_NUM_CUDAS 1 CACHE STRING "Default number of CPUs per process")
endif()

option(DVM_ENABLE_CDVMH "Build with CDVMH support." ON)

if (CMAKE_CONFIGURATION_TYPES)
  set(DVM_C_COMPILE_FLAGS "")
  set(DVM_CXX_COMPILE_FLAGS "")
  set(DVM_Fortran_COMPILE_FLAGS "")
  set(DVM_CXX_LINK_FLAGS "")
  set(DVM_Fortran_LINK_FLAGS "")
  set(DVM_CUDA_FLAGS "")
  foreach(C ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER ${C} C_UPPER)
    foreach(L C CXX Fortran)
      set(DVM_${L}_COMPILE_FLAGS_${C_UPPER} "${DVM_${L}_COMPILE_FLAGS_${C_UPPER}_DEFAULT}" CACHE STRING "Addition flags to apply while DVM system and parallel applications are compiling during ${C}.build.")
      set(DVM_${L}_COMPILE_FLAGS "$<IF:$<CONFIG:${C}>,${DVM_${L}_COMPILE_FLAGS_${C_UPPER}},${DVM_${L}_COMPILE_FLAGS}>")
    endforeach()

    foreach(L CXX Fortran)
      set(DVM_${L}_LINK_FLAGS_${C_UPPER} "${DVM_${L}_LINK_FLAGS_${C_UPPER}_DEFAULT}" CACHE STRING "Addition flags to apply while DVM system and parallel applications are linking during ${C} build.")
      set(DVM_${L}_LINK_FLAGS "$<IF:$<CONFIG:${C}>,${DVM_${L}_LINK_FLAGS_${C_UPPER}},${DVM_${L}_LINK_FLAGS}>")
    endforeach()

    set(DVM_CUDA_FLAGS_${C_UPPER} "${DVM_CUDA_FLAGS_${C_UPPER}_DEFAULT}" CACHE STRING "Addition flags to apply while DVM system and CUDA kernels are compiled during ${C} build.")
    set(DVM_CUDA_FLAGS "$<IF:$<CONFIG:${C}>,${DVM_CUDA_FLAGS_${C_UPPER}},${DVM_CUDA_FLAGS}>")
  endforeach()
else()
  foreach(L C CXX Fortran)
    set(DVM_${L}_COMPILE_FLAGS "${DVM_${L}_COMPILE_FLAGS_DEFAULT}" CACHE STRING "Addition flags to apply while DVM system and parallel applications are compiling.")
  endforeach()

  foreach(L CXX Fortran)
    set(DVM_${L}_LINK_FLAGS "${DVM_${L}_LINK_FLAGS_DEFAULT}" CACHE STRING "Addition flags to apply while DVM system and parallel applications are linking.")
  endforeach()

  set(DVM_CUDA_FLAGS "${DVM_CUDA_FLAGS_DEFAULT}" CACHE STRING "Addition flags to apply while DVM system and CUDA kernels are compiled.")
endif()

set(DVM_C_CONVERTER_FLAGS "${DVM_C_CONVERTER_FLAGS_DEFAULT}" CACHE STRING "Addition flags to apply while CDVMH converter is invoked.")
set(DVM_Fortran_CONVERTER_FLAGS "${DVM_Fortran_CONVERTER_FLAGS_DEFAULT}" CACHE STRING "Addition flags to apply while Fortran DVMH converter is invoked.")

option(DVM_USE_Fortran_WRAPPER "Use Fortran wrappers to access some data from DVM runtime system" ${DVM_USE_Fortran_WRAPPER_DEFAULT})
set(DVM_Fortran_NAMING_MACROS "${DVM_Fortran_NAMING_MACROS_DEFAULT}" CACHE STRING "Addition macros for multi-language interoperability")

find_package(OpenMP)
if (NOT OpenMP_C_FOUND OR NOT OpenMP_CXX_FOUND OR NOT OpenMP_Fortran_FOUND)
  unset(DVM_ENABLE_OPENMP CACHE)
  set(DVM_ENABLE_OPENMP OFF)
else()
  unset(DVM_ENABLE_OPENMP)
  option(DVM_ENABLE_OPENMP "Build DVM system without OpenMP support." ON)
  if (DVM_ENABLE_OPENMP)
    set(DVM_OpenMP_C_FLAGS ${OpenMP_C_FLAGS})
    set(DVM_OpenMP_CXX_FLAGS ${OpenMP_CXX_FLAGS})
    set(DVM_OpenMP_Fortran_FLAGS ${OpenMP_Fortran_FLAGS})

    file(WRITE ${CMAKE_BINARY_DIR}/check_openmp.c "
      #include <omp.h>
      int main(int Argc, char **Argv) {
        return omp_get_max_threads();
      }
    ")
    try_run(
      RUN_RESULT COMPILE_RESULT
      ${CMAKE_BINARY_DIR} ${CMAKE_BINARY_DIR}/check_openmp.c
      CMAKE_FLAGS CMAKE_C_FLAGS="${DVM_OpenMP_C_FLAGS}"
    )
    set(DVMH_NUM_THREADS ${RUN_RESULT} CACHE STRING "Default number of CPU threads per process")
  else()
    set(DVM_OpenMP_C_FLAGS "")
    set(DVM_OpenMP_CXX_FLAGS "")
    set(DVM_OpenMP_Fortran_FLAGS "")
    unset(DVMH_NUM_THREADS CACHE)
  endif()
endif()

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${DVM_BINARY_DIR}/install" CACHE PATH "Install path prefix prepended onto install directories." FORCE)
endif()

set(DVM_DIR ${CMAKE_INSTALL_PREFIX}/$<CONFIG>)
set(DVM_BIN_DIR ${DVM_DIR}/bin)
set(DVM_INCLUDE_DIR ${DVM_DIR}/include)
set(DVM_ARCHIVE_DIR ${DVM_DIR}/lib)
set(DVM_PARAMETER_DIR ${DVM_DIR}/par)
set(DVM_USER_DIR ${DVM_DIR}/user)

set(DVM_C_COMPILER $CACHE{CMAKE_C_COMPILER})
set(DVM_CXX_COMPILER $CACHE{CMAKE_CXX_COMPILER})
set(DVM_Fortran_COMPILER $CACHE{CMAKE_Fortran_COMPILER})

add_subdirectory(tools/Zlib)
add_subdirectory(tools/pppa)
add_subdirectory(driver)
add_subdirectory(rts)
add_subdirectory(rts/dvmh)
add_subdirectory(fdvm)
if (DVM_ENABLE_CDVMH)
  add_subdirectory(cdvmh)
endif()

message(STATUS "Set platform to ${DVM_PLATFORM_STRING}")

# Remove return statement to enable debug output of all DVM platform variables.
return()

message(STATUS "DVM_VERSION=${DVM_VERSION}")
message(STATUS "DVM_MACHINE_STRING=${DVM_MACHINE_STRING}")
if (CMAKE_CONFIGURATION_TYPES)
  message(STATUS "CMAKE_CONFIGURATION_TYPES=${CMAKE_CONFIGURATION_TYPES}")
else()
  message(STATUS "CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
endif()
message(STATUS "DVM_MPI_BIN=${DVM_MPI_BIN}")
message(STATUS "DVM_ENABLE_CUDA=${DVM_ENABLE_CUDA}")
message(STATUS "DVM_ENABLE_OPENMP=${DVM_ENABLE_OPENMP}")
if (DVM_ENABLE_OPENMP)
  message(STATUS "DVMH_NUM_THREADS=${DVMH_NUM_THREADS}")
endif()
if (DVM_ENABLE_CUDA)
  message(STATUS "DVMH_NUM_CUDAS=${DVMH_NUM_CUDAS}")
  message(STATUS "CMAKE_CUDA_ARCHITECTURES=${CMAKE_CUDA_ARCHITECTURES}")
  if (CMAKE_CONFIGURATION_TYPES)
    foreach(C ${CMAKE_CONFIGURATION_TYPES})
      string(TOUPPER ${C} C_UPPER)
      message(STATUS "DVM_CUDA_FLAGS_${C_UPPER}=${DVM_CUDA_FLAGS_${C_UPPER}}")
    endforeach()
  else()
    message(STATUS "DVM_CUDA_FLAGS=${DVM_CUDA_FLAGS}")
  endif()
endif()
message(STATUS "DVM_ENABLE_CDVMH=${DVM_ENABLE_CDVMH}")
message(STATUS "DVM_RUN=${DVM_RUN}")
message(STATUS "DVM_EXEC=${DVM_EXEC}")

if (WIN32)
  message(STATUS "DVM_MSYS_ROOT=${DVM_MSYS_ROOT}")
  message(STATUS "DVM_Fortran_SETVARS=${DVM_Fortran_SETVARS}")
  message(STATUS "DVM_WINAPI_LIBRARIES=${DVM_WINAPI_LIBRARIES}")
endif()

message(STATUS "DVM_C_COMPILER=${DVM_C_COMPILER}")
message(STATUS "DVM_C_CONVERTER_FLAGS=${DVM_C_CONVERTER_FLAGS}")
if (CMAKE_CONFIGURATION_TYPES)
  foreach(C ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER ${C} C_UPPER)
    message(STATUS "DVM_C_COMPILE_FLAGS_${C_UPPER}=${DVM_C_COMPILE_FLAGS_${C_UPPER}}")
  endforeach()
else()
  message(STATUS "DVM_C_COMPILE_FLAGS=${DVM_C_COMPILE_FLAGS}")
endif()

message(STATUS "DVM_CXX_COMPILER=${DVM_CXX_COMPILER}")
if (CMAKE_CONFIGURATION_TYPES)
  foreach(C ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER ${C} C_UPPER)
    message(STATUS "DVM_CXX_COMPILE_FLAGS_${C_UPPER}=${DVM_CXX_COMPILE_FLAGS_${C_UPPER}}")
    message(STATUS "DVM_CXX_LINK_FLAGS_${C_UPPER}=${DVM_CXX_LINK_FLAGS_${C_UPPER}}")
  endforeach()
else()
  message(STATUS "DVM_CXX_COMPILE_FLAGS=${DVM_CXX_COMPILE_FLAGS}")
  message(STATUS "DVM_CXX_LINK_FLAGS=${DVM_CXX_LINK_FLAGS}")
endif()

message(STATUS "DVM_Fortran_COMPILER=${DVM_Fortran_COMPILER}")
if (CMAKE_CONFIGURATION_TYPES)
  foreach(C ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER ${C} C_UPPER)
    message(STATUS "DVM_Fortran_COMPILE_FLAGS_${C_UPPER}=${DVM_Fortran_COMPILE_FLAGS_${C_UPPER}}")
    message(STATUS "DVM_Fortran_LINK_FLAGS_${C_UPPER}=${DVM_Fortran_LINK_FLAGS_${C_UPPER}}")
  endforeach()
else()
  message(STATUS "DVM_Fortran_COMPILE_FLAGS=${DVM_Fortran_COMPILE_FLAGS}")
  message(STATUS "DVM_Fortran_LINK_FLAGS=${DVM_Fortran_LINK_FLAGS}")
endif()
message(STATUS "DVM_Fortran_CONVERTER_FLAGS=${DVM_Fortran_CONVERTER_FLAGS}")
message(STATUS "DVM_USE_Fortran_WRAPPER=${DVM_USE_Fortran_WRAPPER}")
message(STATUS "DVM_Fortran_NAMING_MACROS=${DVM_Fortran_NAMING_MACROS}")
message(STATUS "DVM_Fortran_LIBRARIES=${DVM_Fortran_LIBRARIES}")
