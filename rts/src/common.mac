#ifndef _COMMON_MAC_
#define _COMMON_MAC_
/******************/    /*E0000*/

/*****************\
*  Common macros  *
\*****************/    /*E0001*/

#define dvm_mod(Op,D)       (((Op) % (D) != 0) ? 1:0)
#define dvm_abs(Op)         (((Op) > 0) ? (Op):-(Op))
#define dvm_sign(Op)        (((Op) > 0) ? 1:(-1))
#define dvm_min(Op1, Op2)   (((Op1) > (Op2))? (Op2):(Op1))
#define dvm_max(Op1, Op2)   (((Op1) > (Op2))? (Op1): (Op2))


/*****************\
*  Memory macros  *
\*****************/    /*E0002*/

#define dvm_getmemnoerr(Size)  rtl_malloc(Size, 1)

#define dvm_getclearmem(Size)  rtl_calloc(Size, 1, 0)

#define dvm_getmem(Size)       rtl_malloc(Size, 0)

#define dvm_freemem(Ptr)       rtl_free((void **)(Ptr))

#define dvm_realloc(Ptr, NewSize)\
        if((NewSize) == 0 || *(Ptr) == NULL)\
        {  mac_free(Ptr);\
        }\
        else\
        {  mac_realloc(*(Ptr), void *, *(Ptr), NewSize, 0);\
        }

#define dvm_reallocnoerr(Ptr, NewSize)\
        if((NewSize) == 0 || *(Ptr) == NULL)\
        {  mac_free(Ptr);\
        }\
        else\
        {  mac_realloc(*(Ptr), void *, *(Ptr), NewSize, 1);\
        }

#define dvm_CallocArray(m_Type, m_Size, m_Array)\
        mac_calloc(m_Array, m_Type *, (m_Size), sizeof(m_Type), 0);

#define dvm_CallocStruct(m_Type, m_Struct)\
        mac_calloc(m_Struct, m_Type *, 1, sizeof(m_Type), 0);

#define dvm_AllocArray(m_Type, m_Size, m_Array)\
	mac_malloc(m_Array, m_Type *, (m_Size)*sizeof(m_Type), 0)

#define dvm_AllocStruct(m_Type, m_Struct)\
	mac_malloc(m_Struct, m_Type *, sizeof(m_Type), 0)

#define dvm_ReallocArray(Type, NewCount, Arr)\
	mac_realloc(Arr,Type *,(void *)Arr,sizeof(Type)*(NewCount),0)

#define dvm_FreeStruct(m_Struct)\
        mac_free((void **)(&(m_Struct)))

#define dvm_FreeArray(Arr)\
        mac_free((void **)(&(Arr)))

#define dvm_memcopy(Dest, Src, Size)\
        SYSTEM(memcpy,((void *)(Dest),(void *)(Src),(int)(Size)))

#define dvm_ArrayCopy(Type, Dest, Src, Count)\
     SYSTEM(memcpy,((void *)(Dest),(void *)(Src),sizeof(Type)*(Count)))


#define  mac_calloc(ptr, type, n, size, noerr)\
  if(SaveAllocMem == 0 || AllocBuffer == NULL || UserSumFlag == 0)\
  { DvmType N=(n)+SizeDelta[((n)*(size))&Msk3]/(size)+1;\
    SYSTEM_RET(ptr,(type)calloc,((size_t)(N+sizeof(double)/(size)+1),\
                                 (size_t)(size) ))\
    alloc_noerr = noerr;\
    if(ptr == NULL && alloc_noerr == 0)\
    { pprintf(2+MultiProcErrReg2,"*** RTS err 200.000: no memory\n");\
      epprintf(MultiProcErrReg2,__FILE__,__LINE__,\
               "calloc parameters: n=%ld; size=%ld;\n",\
               (n), (size));\
    }\
  }\
  else\
    ptr = (type)rtl_calloc((n),(size),noerr)


#define  mac_malloc(ptr, type, n, noerr)\
  if(SaveAllocMem == 0 || AllocBuffer == NULL || UserSumFlag == 0)\
  {  DvmType N=(n)+SizeDelta[(n)&Msk3];\
     SYSTEM_RET(ptr, (type)malloc,( (size_t)(N+sizeof(double)) ))\
     alloc_noerr = noerr;\
     if(ptr == NULL && alloc_noerr == 0)\
     { pprintf(2+MultiProcErrReg2,"*** RTS err 200.003: no memory\n");\
       epprintf(MultiProcErrReg2,__FILE__,__LINE__,\
                "malloc parameter: n=%ld;\n", (n));\
     }\
  }\
  else\
     ptr = (type)rtl_malloc((n),noerr)


#define  mac_free(ptr)\
  if(*(ptr) != NULL)\
  {  if(SaveAllocMem == 0 || AllocBuffer == NULL || UserSumFlag == 0)\
        SYSTEM(free, (*(ptr)))\
     else\
        rtl_free((void **)(ptr));\
  }\
  *(ptr) = NULL


#define  mac_realloc(PTR, type, ptr, size, noerr)\
if(SaveAllocMem == 0 || AllocBuffer == NULL || UserSumFlag == 0)\
{ DvmType SIZE=(size)+SizeDelta[(size)&Msk3];\
  SYSTEM_RET(PTR,(type)realloc,((ptr),(size_t)(SIZE+sizeof(double))))\
  alloc_noerr = noerr;\
  if(PTR == NULL && alloc_noerr == 0)\
  {  pprintf(2+MultiProcErrReg2,"*** RTS err 200.006: no memory\n");\
     epprintf(MultiProcErrReg2,__FILE__,__LINE__,\
              "realloc parameters: ptr=%p(%x); size=%ld;\n",\
              (ptr),(UDvmType)(ptr),(size));\
  }\
}\
else\
   PTR = (type)rtl_realloc((void *)(ptr), (size), noerr)


/**************************\
* Time function definition *
\**************************/    /*E0003*/

#ifdef _DVM_MPI_
   #ifdef _WIN_MPI_
     #ifdef _NT_MPI_
        #define dvm_time() (MPI_Wtime() + dvm_TimeDelta)
     #else
        #define dvm_time() (1000.0*MPI_Wtime() + dvm_TimeDelta)
     #endif
   #else
     #ifdef _UNIX_
        #define dvm_time() ( UTime_Sign ?\
                             (gettimeofday(&dvm_timeval,NULL),\
                              (double)dvm_timeval.tv_sec+\
                              ((double)dvm_timeval.tv_usec)*0.000001) :\
                             (MPI_Wtime_Sign ?\
                              (MPI_Wtime() + dvm_TimeDelta) :\
                              (((double)clock() * dvmclock) +\
                               dvm_TimeDelta)) )
     #else
        #define dvm_time() ( MPI_Wtime_Sign ?\
                             (MPI_Wtime() + dvm_TimeDelta) :\
                             (((double)clock() * dvmclock) +\
                              dvm_TimeDelta) )
     #endif
   #endif
#else
   #ifdef _i860_
      #define dvm_time() (ttime() + dvm_TimeDelta)
   #else
      #ifdef _DVM_PVM_
         #define dvm_time() (((double)clock() * dvmclock) +\
                             dvm_TimeDelta)
      #else
         #ifdef _DVM_ROU_
	    #define dvm_time() (_cputime()/1000.0 + dvm_TimeDelta)
	 #else
	    #define dvm_time() (((double)clock() * dvmclock) +\
                                dvm_TimeDelta)
	 #endif	 
      #endif
   #endif
#endif


/*
#ifdef _DVM_MPI_
   #ifdef _WIN_MPI_
     #define dvm_time() (1000.0*MPI_Wtime() + dvm_TimeDelta)
   #else
     #define dvm_time() (MPI_Wtime() + dvm_TimeDelta)
   #endif
#else
   #ifdef _i860_
      #define dvm_time() (ttime() + dvm_TimeDelta)
   #else
      #ifdef _DVM_PVM_
         #define dvm_time() (((double)clock() * dvmclock) +\
                             dvm_TimeDelta)
      #else
         #ifdef _DVM_ROU_
	    #define dvm_time() (_cputime()/1000.0 + dvm_TimeDelta)
	 #else
	    #define dvm_time() (((double)clock() * dvmclock) +\
                                dvm_TimeDelta)
	 #endif	 
      #endif
   #endif
#endif
*/    /*e0004*/


/************************************************************\
* Access to the file                                        *                                                            *
\************************************************************/    /*E0005*/

#ifdef _UNIX_
    #define OPENMODE(mode) #mode
#else
    #define OPENMODE(mode) #mode"t"
#endif


#endif /* _COMMON_MAC_ */    /*E0006*/
