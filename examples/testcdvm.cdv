#include <math.h>
#include <stdlib.h>
#include <stdio.h>

#define N 32
#define M 32
#define NL 1000

static void sh2101();
static void serial2(int AR[N][M], int NN, int NM, int NNL);
static void ansyes(const char tname[]);
static void ansno(const char tname[]);

int main(int argc, char *argv[])
{
    sh2101();
    return 0;
}

void sh2101()
{
    int C[N][M];
    int nloopi, nloopj, ib;
    char tname[] = "T_CDVM";
    int i, j, NN, NM, NNL;
    #pragma dvm array distribute[block][block]
    int B[N][M];
    #pragma dvm array align([i][j] with B[i][j])
    int A[N][M];

    NN = N;
    NM = M;
    NNL = NL;
    serial2(C, NN, NM, NNL);
    nloopi = NL;
    nloopj = NL;
    #pragma dvm region local(A), out(B)
    {
    #pragma dvm parallel([i][j] on A[i][j])
    for (i = 0; i < N; i++)
        for (j = 0; j < M; j++)
            A[i][j] = NL + i + j;

    #pragma dvm parallel([i][j] on B[i][j]) shadow_renew(A(corner))
    for (i = 1; i < N - 1; i++)
        for (j = 1; j < M - 1; j++)
            B[i][j] = A[i + 1][j] + A[i][j + 1] + A[i - 1][j] + A[i][j - 1] + A[i - 1][j - 1] +
                    A[i + 1][j + 1] + A[i - 1][j + 1] + A[i + 1][j - 1];
    }

    #pragma dvm get_actual(B)
    #pragma dvm parallel([i][j] on B[i][j]) reduction(min(nloopi), min(nloopj))
    for (i = 1; i < N - 1; i++)
        for (j = 1; j < M - 1; j++)
        {
            if (B[i][j] != C[i + 1][j] + C[i][j + 1] + C[i - 1][j] + C[i][j - 1] + C[i - 1][j - 1] +
                    C[i + 1][j + 1] + C[i - 1][j + 1] + C[i + 1][j - 1])
            {
                if (nloopi > i) nloopi = i;
                if (nloopj > j) nloopj = j;
            }
        }

    if (nloopi == NL && nloopj == NL)
        ansyes(tname);
    else
        ansno(tname);
}

void serial2(int AR[N][M], int NN, int NM, int NNL)
{
    int i, j;

    for (i = 0; i < NN; i++)
        for (j = 0; j < NM; j++)
            AR[i][j] = NNL + i + j;
}

void ansyes(const char name[])
{
    printf("%s  -  complete\n", name);
}

void ansno(const char name[])
{
    printf("%s  -  ***error\n", name);
}
