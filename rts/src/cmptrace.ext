
#ifndef _CMPTRACE_EXT_
#define _CMPTRACE_EXT_
/********************/

extern DVMUSERVAR
       byte EnableTrace;   /* is calculation tracing allowed or denied */

extern byte EnableCodeCoverage; /* defines if code coverage gathering is turned on or off */

extern byte DelUsrTrace; /* delete old files
                            with trace */
extern char TraceOptionsTraceFile[MaxPathSize + 1]; /* name of standard file
                                                       with user program trace */
extern byte ManualReductCalc;  /* mode of manual reduction calculation */

extern struct
{
    char    FileLoopInfo[MaxParFileName+1]; /* loop description file */
    char    ErrorFile[MaxParFileName+1];    /* file for diagnostics output */
    char    TracePath[MaxPathSize + 1];     /* directory for trace files */
    char    InputTracePrefix[MaxParFileName+1];  /* input trace prefix */
    char    OutputTracePrefix[MaxParFileName+1]; /* output trace prefix */
    char    Ext[4];                         /* extensions for processor trace files */
    double  Exp;                            /* accuracy of floating point number comparison */
    double  RelCompareMin;                  /* parameter which limits relative copmparison of small numbers */
    byte    ExpIsAbsolute;                  /* flag, which defines the type of accuracy to use
                                               1 - absolute, 0 - relative accuracy */
    byte    StrictCompare;                  /* flag, defines how the values are gonna be compared
                                               1 - use Exp as threshold, 0 - no threshold */
    int     TraceMode;                      /* trace mode */
    int     TraceLevel;                     /* trace nesting level */
    int     SpaceIndent;                    /* indent size for next level */
    byte    ErrorToScreen;                  /* flag of screen output of diagnostics */
    /* now this parameter is not used */
    int     WrtHeaderProc;                  /* processor writing information about loops */

    int     TableTraceSize;                 /* sizes of tables for trace */

    int     HashIterIndex;
    int     HashIterSize;

    int     ReductHashIndexSize;            /* size of HASH-table index for reduction variable table */
    int     ReductHashTableSize;            /* structure array size for HASH-table of reduction variable table */

    int     ReductVarTableSize;             /* structure array size for reduction variable table */

    byte    SaveThroughExec;                /* trace writing during execution */
    byte    WriteEmptyIter;                 /* empty iteration tracing */
    byte    AppendErrorFile;                /* add messages to existing file */
    int     MaxErrors;                      /* maximal number of detected errors */
    byte    MultidimensionalArrays;         /* use multidimensional limits for arrays */
    byte    drarr;
    int     DefaultArrayStep;               /* default array step */
    int     DefaultIterStep;                /* default iteration step */
    byte    ChecksumMode;                   /* defines the coverage of arrays for calculating checksums */
    byte    CalcChecksums;                  /* defines if in addition to usual level checksums will be calculated */
    byte    ChecksumBinary;                 /* defines if checksums are calculated by binary addition */
    byte    SeqLdivParContextOnly;          /* defines if seq. loops will be divided in blocks
                                               only if they are nested in parallel loop or always */
    byte    ChecksumDisarrOnly;             /* defines if checksums are calculated for disarrays only */
    byte    TrapArraysAnyway;               /* defines whether to trap access to arrays if header read or not */
    char    StartPoint[MAX_NUMBER_LENGTH];  /* dynamic point from which to start the trace */
    char    FinishPoint[MAX_NUMBER_LENGTH]; /* dynamic point from which to finish the trace */
    char    SaveArrayFilename[MaxParFileName+1]; /* file to contain array elements when saved */
    char    SaveArrayID[MaxArrayID+1];      /* ID of an array to be saved */
    int     Ig_left, Ig_right;              /* number of global first and last parallel loops iterations */
    int     Iloc_left, Iloc_right;          /* number of local first and last parallel loops iterations */
    int     Irep_left, Irep_right;          /* number of first and last sequential loops iterations */
    byte    SubstRedResults;                /* substitute reduction results with the results from the trace */
    byte    SubstAllResults;                /* substitute all write operations results with the results from the trace */
    byte    AllowErrorsSubst;               /* substitute operation results even when they counts as errors */
    byte    DisableRedArrays;               /* disable reduction array's debugging */
    byte    SRCLocCompareMode;              /* comparison mode for code locations */
    int     LocIterWidth;                   /* number of local first and last parallel loops iterations */
    int     GlobIterWidth;                  /* number of global first and last parallel loops iterations */
    int     RepIterWidth;                   /* number of first and last sequential loops iterations */
    int     IterTraceMode;                  /* controls VTR value in programs compiled with VTR */
    byte    SetCoreSizeMax;                 /* set core file size to maximum allowed (Unix only) */
    byte    EnableNANChecks;                /* indicates if runtime checks for NotANumber values are performed */
    byte    MrgTracePrint;                  /* mode of printing merged trace 0 - no print, 1 - print, 2 - print & stop execution */
}
TraceOptions;


extern TABLE DelayTrace;
extern VAR_TABLE ReductVarTable;

extern TRACE Trace;
extern byte TraceInit;
extern byte TraceHeaderRead;

extern char error_message [1024];
extern char trc_rdwrt_buff[1024];
extern char trc_filebuff[MaxPathSize + 1];
extern char trc_filebuff1[MaxPathSize + 1];

extern char *KeyWords[];
extern char *TraceDescriptions[];

#ifndef _DVM_IOPROC_
   extern TRACE_VTABLE cmpTable;
   extern TRACE_VTABLE putTable;
   extern PFN_ARRAY_CAN_TRACE trc_ArrayCanTrace;
#endif

extern TRACE_VTABLE* pCmpOperations;
extern DvmType CurrCmpTraceFileSize;
extern int  PackedCPUSetSize;
extern PFN_COMPARE_VALUE trc_CompareValue;
extern PFN_DIVIDE_FUNC divide_set;

#endif  /* _CMPTRACE_EXT_ */
