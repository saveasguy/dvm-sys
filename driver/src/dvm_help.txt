               Usage of DVM-system for compilation
--------------------------------------------------------------------------
    dvm <operation> [options] <input files>
Operations:
    help     Display this information.
    ver      Display DVM-system version information.
    c        Use C-DVMH compiler.
    f        Use Fortran-DVMH compiler.
    cdv      Convert C-DVMH program only; do not compile or link.
    fdv      Convert Fortran-DVMH program only; do not compile or link.
    cc       Compile and link C-DVMH convertation results.
    fc       Compile and link Fortran-DVMH convertation results.
    clink    Link C-DVMH and other objects with LibDVMH.
    flink    Link Fortran-DVMH and other objects with LibDVMH.


               Options
--------------------------------------------------------------------------
Output and debugging options:
    -o <file>       Place the output into <file>.
    -c              Compile to object (.o) only, do not link.
    -s              Produce sequential program.
    -noH            Process only original DVM constructions ignoring new
                    DVMH constructions.
    -mmic           Compile program for MIC architecture.
    -w              Display all the warning messages.
    -Minfo          Show information of CUDA Ptx assembler for each
                    parallel loop and sequence statements in regions.
    -I<dir>         Add directory <dir> to the list of directories searched
                    for include files.
    -bind<k>        Specifies the compatibility of data types between
                    Fortran and C (for cross-convertation only).
    -bufio<size>    Set distributed array printing buffer size equal to
                    <size> for Fortran-DVMH programs.
    -d<level_d>     Produce additional code for the program debugging;
                    <level_d> = 1|2|3|4.
    -e<level_e>     Produce additional code for program performance
                    analysis; <level_e> = 1|2|3|4.
    -emp            Produce additional code for threads perfomance
                    analysis.
    -dbif<l>        Set optimization level for debug mode - comparing only
                    first and last iterations of parallel loop; <l> = 1|2;
                    recommended to use <l> = 2 for debugging large programs.
    -shared-dvm     Link DVMH provided libraries dynamically. Static link
                    is used by default (NOTE: It works only for Unix OS).

Convertation options:
    -f90            Assume that Fortran sources use the free form layout
                    (default for f90, f95, f03 files).
    -FI             Assume that Fortran sources use the fixed form layout
                    (default for all other Fortran files).
    -ffo            Use the free form layout for Fortran-DVMH's convertation
                    results.
    -r8             Assume default kind of real to be 8 for Fortran-DVMH
                    programs.
    -i8             Assume default kind of integer to be 8 for Fortran-DVMH
                    programs.
    -noLimitLine    Unlimited line length of free form output file.

Optimization options:
    -autoTfm        Allow DVMH-runtime system to select optimal layout of
                    distributed arrays in GPU memory automatically.
    -C_Cuda         Do not use PGI Fortran-CUDA to generate C-CUDA code;
                    generate it directly by converter instead (default).
    -F_Cuda         Use PGI Fortran-CUDA to generate C-CUDA code.
    -Ohost          Optimize generated CPU code.
    -noCuda         Do not generate CUDA code.
    -Opl            Prepare parallel shared-memory (OpenMP style) execution
                    for parallel loops outside regions.
    -Opl2           Use the RTS2 interface when generate a parallel program.
                    The option is required if the DVM program contains
                    directives for non-structural meshes or specifying an
                    undistributed parallel loop.
    -gpuO1          Turn on risky optimizations for CUDA code.
    -rtc            Use CUDA Runtime compilation (NVRTC library).
    -collapse<N>    Allow DVM compiler to generate COLLAPSE(<N>) clause in
                    OpenMP directives in host-handlers.
    -cacheIdx       Allow DVM compiler to cache loop's index variables for
                    CUDA kernels.
-dvmPrivateAnalysis Automatically add scalar private variables and check
                    existing PRIVATE clauses for PARALLEL loops.
-dvmLoopAnalysis    Enable loop analysis and optimizations for all PARALLEL
                    loops (for PARALLEL loops with ACROSS always enabled).
-dvmLoopAnalysisEC  Enable '-dvmLoopAnalysis' with expression computation
                    analysis.
-dvmIrregAnalysis   Enable irregular access optimization for GPU code. It
                    activates 'dvmLoopAnalysisEC' option.
    -read_all       READ, OPEN and CLOSE operator (only for not distributed
                    variables) are executed by all processes (instead of
                    read from root process and broadcast to others).
    -noRemote       Allow DVM compiler to ignore REMOTE_ACCESS directives to
                    speedup single process execution. 
    -noPureFunc     Allow DVM compiler to ignore lack of PURE indication for
                    functions (Fortran only).
    -dynComp        Allow NVCC to compile procedures and functions with 
                    ROUTINE directive separately. It can be used both 
                    during compilation and linking passes.
    
               Input files
--------------------------------------------------------------------------
    <file>.<ext>    Input <file> with <ext> = fdv|f|ftn|for|f90|f95|f03 in
                    Fortran-DVMH language.
    <file>.<ext>    Input <file> with <ext> = cdv|c|h in C-DVMH language.
    <file>          <File> name with none of the above mentioned extensions
                    will be appended with corresponding extension (.fdv or
                    .cdv) automatically.


               Usage of DVM-system for running programs
--------------------------------------------------------------------------
    dvm <operation> [matrix] <program>
Operations:
    run      Run the program.
    err      Run the program in debug mode.
    cmph     Run the program in comparative debugging mode (compare GPU
             execution with CPU one).
Matrix:
    <v1> <v2> ... <vn>   Set virtual processor topology for distributed
                         arrays and templates; <vi> = 1|2|3|...|N - number
                         of processors.
Program:
    <file>   Executable <file> name.


               Environment variables
--------------------------------------------------------------------------
    DVMH_LOGLEVEL        Logging level. Accepted values:
                         0, fatal - Only fatal errors
                         1, error, err - Only errors (default)
                         2, warning, warn - Errors and warnings
                         3, info - Errors, warnings and information messages
                         4, debug - Errors, warnings, information, debug. Also
                             changes the output format to more verbose.
                         5, trace - Errors, warnings, information, debug, trace
    DVMH_FLUSHLOGLEVEL   Highest logging level which leads to log file flush.
                         Default is 0 (fatal).
    DVMH_LOGFILE         Log file name. Use wildcard %d (or %04d or so, see 
                         printf format for integer value). Default is empty
                         meaning stderr.
    DVMH_FATAL_TO_STDERR Boolean value. 1 (enable, yes, on) means fatal messages
                         will be additionally written to stderr. Default is 1.
    DVMH_NUM_THREADS     Integer value. Number of CPU threads per one process.
    DVMH_NUM_CUDAS       Integer value. Number CUDA devices per one process.
    DVMH_CPU_PERF        Real number. Performance of CPU. Default is 1.
    DVMH_CUDAS_PERF      Real number. Performance if GPU. Default is 1.
    DVMH_SCHED_TECH      Scheduling technique. Accepted values:
                         0, single, device - Use only one device.
                         1, static - Use static global weights (default).
                         2, dynamic1 - Use dynamically adjusted global weights.
    DVMH_COMPARE_DEBUG   Boolean value. 1 (enable, yes, on) turns on
                         comparative debugging mode. Default is 0.
    DVMH_COMPARE_FLOATS_EPS        Real number. Epsilon to use for comparison
                                   of float numbers. Default is approx 1.2e-4.
    DVMH_COMPARE_DOUBLES_EPS       Real number. Epsilon to use for comparison
                                   of double precision numbers. Default is
                                   approx 2.2e-12.
    DVMH_COMPARE_LONGDOUBLES_EPS   Real number. Epsilon to use for comparison
                                   of long double numbers. Default is approx
                                   1.1e-14.
    DVMH_SYNC_CUDA                 Boolean value. Synchronize with CUDA device
                                   after each operation (for debugging).
                                   Default is 0.
    DVMH_FORTRAN_NOTATION          Boolean value. Use fortran notation for log
                                   messages containing array references.
                                   Default depends on main module source
                                   language.
    DVMH_CACHE_CUDA_ALLOC          Boolean value. Cache CUDA memory allocations.
                                   Default is 1.
    DVMH_PAGE_LOCK_HOST_MEM        Boolean value. Page-lock main memory for
                                   distributed arrays.
                                   Default is 1.
    DVMH_SET_AFFINITY    Boolean value. Let DVM system to set CPU thread
                         affinity. Default depends on I_MPI_PIN,
                         I_MPI_PIN_PROCESSOR_LIST, I_MPI_DOMAIN, KMP_AFFINITY
                         environment variables.
    DVMH_OPT_PARAMS      Boolean value. Let DVM system to dynamically adjust
                         optimization parameters. Default is 0.
    DVMH_NO_DIRECT_COPY  Boolean value. Turn off direct main memory access from
                         GPU for copying purposes. Default is 0.
    DVMH_SPECIALIZE_RTC  Boolean value. Allow DVM system to reduce passed
                         parameter number for RTC calls. Default is 1.
    DVMH_PREFER_CALL_SWITCH        Boolean value. Prefer calling foreign
                                   functions without libffi. Default is 1.
    DVMH_NUM_VARIANTS_FOR_VAR_RTC  Integer value. Set number of parameter
                                   values for RTC calls. Default is 3.
    DVMH_PARALLEL_IO_THRES         Integer value. Minimum size (in bytes) of
                                   I/O operation to switch to parallel I/O
                                   routine. Default is 104857600.
    DVMH_IO_BUF_SIZE     Integer value. Maximum size (in bytes) of I/O
                         buffer when I/O operation is performed by the
                         master node. Default is 104857600.
    DVMH_STACKSIZE       set stack size via 'ulimit -s DVMH_STACKSIZE' command.
